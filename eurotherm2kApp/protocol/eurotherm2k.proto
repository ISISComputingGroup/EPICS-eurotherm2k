## \file
## Stream Device Protocol for eurotherm 2000 series EI Bisynch
## will look for the record \$1ERR which will process any errors

locktimeout = 5000;

OutTerminator   = "";

# Uses a timeout when there is no termination character (i.e. for reads)
replytimeout = 200;
readtimeout  = 100;
extrainput   = Error;

# time to wait after read (see below)
waittime = 20;

#STX = "\x02"
#ETX = "\x03"
#EOT = "\x04"
#ENQ = "\x05"
#ACK = "\x06"

## Read value
## \code
## send: [EOT](GAD)(GAD)(LAD)(LAD)(CHAN)(C1)(C2)[ENQ]
## reply: [STX](CHAN)(C1)(C2)<DATA>[ETX](BCC)
## \endcode
##
## - $1 = device prefix, \$(P)
## - $2 = command mnemonic
## - $3 = GAD = First char of address, e.g. address = 1, GAD = 0, address = 12, GAD = 1
## - $4 = LAD = Second char of address, e.g. address = 1, LAD = 1, address = 12, LAD = 2
#############################################################################


## read a normal value using the \x03 as the termination character on read
##   this means there is an extra BCC character left in the buffer this is 
##   either read as part of the next read (hence the regex for a random character) or is got rid of as part 
##   of the buffer flush done by stream. The eurotherm will not respond if it is still writting the last character (BCC)
##   to the buffer so we wait for a small amount of time to allow it to finish writing this character (without this there are may time out warnings)
read_once  {out "\x04\$3\$3\$4\$4\$2\x05"; in "%*/.?\x02/\$2%#f"; wait $waittime;}
readhex_once  {out "\x04\$3\$3\$4\$4\$2\x05"; in "%*/.?\x02/\$2>%x"; wait $waittime;}

## read the value (if it times out re read it)
read { InTerminator = "\x03"; read_once; @readtimeout { read_once; } }

## Read value, but in hex (if it times out re read it)
readhex { InTerminator = "\x03"; readhex_once; @readtimeout { readhex_once; } }


## Write value
## \code
## send: [EOT](GAD)(GAD)(LAD)(LAD)[STX](CHAN)(C1)(C2)<DATA>[ETX](BCC)
## reply: [ACK] or [NAK], discarded as no terminator
## \endcode
## - $1 = device prefix, \$(P)
## - $2 = command mnemonic
## - $3 = GAD = First char of address, e.g. address = 1, GAD = 0, address = 12, GAD = 1
## - $4 = LAD = Second char of address, e.g. address = 1, LAD = 1, address = 12, LAD = 2
#############################################################################

## read the error and put it in error record. There are no termination characters for this
##   because it is a write so get back both the \x03 and BCC
read_error { out "\x04\$3\$3\$4\$4EE\x05"; in "%*/.?\x02/EE>%(\$1ERR)x\x03%*c"; } 

## read the value on init, because it is part of write there is no terminator character so get back both the \x03 and BCC
##  no need for regex on beinging since everything is read correctly
read_init     { InTerminator = ""; out "\x04\$3\$3\$4\$4\$2\x05";  in "\x02\$2%#f\x03%*c";}
read_init_int { InTerminator = ""; out "\x04\$3\$3\$4\$4\$2\x05";  in "\x02\$2%i\x03%*c";}

## write value to the eurotherm. The reply is a single character so InTerminator must be blank and we reply on the timeout
## on an error (e.g. NAK mismatches ACK) read the error code immediately from the device
write {
    InTerminator = ""; 
	out "\x04\$3\$3\$4\$4\x02\$2%#.3f\x03%6<xor>"; 
	in "\x06";
	@init{ read_init; }; 
	@mismatch{ read_error; }; 
}

## Write a value in int rather than float. The reply is a single character so InTerminator must be blank and we reply on the timeout
## on an error (e.g. NAK mismatches ACK) read the error code immediately from the device
writeint {  
    InTerminator = ""; 
	out "\x04\$3\$3\$4\$4\x02\$2%i\x03%6<xor>"; 
	in "\x06"; 
	@init{ read_init_int; }; 
	@mismatch{ read_error; }; 
}
